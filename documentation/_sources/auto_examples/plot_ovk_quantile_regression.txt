

.. _sphx_glr_auto_examples_plot_ovk_quantile_regression.py:


======================================================
Joint quantile regression with operator-valued kernels
======================================================

An example to illustrate joint quantile regression with operator-valued
kernels.

We compare quantile regression estimation with and without non-crossing
constraints.




.. image:: /auto_examples/images/sphx_glr_plot_ovk_quantile_regression_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    Creating dataset...
    Fitting...
    joint leaning time:  0.246126174927
    joint score  0.7703945361
    independant leaning time:  0.137208938599
    independant score  0.769375053019
    non-crossing leaning time:  0.807484865189
    non-crossing score  0.769973790545




|


.. code-block:: python


    # Author: Maxime Sangnier <maxime.sangnier@gmail.com>
    # License: MIT

    # -*- coding: utf-8 -*-

    from operalib import Quantile, toy_data_quantile

    import numpy as np
    import time
    import matplotlib.pyplot as plt

    np.random.seed(0)

    print("Creating dataset...")
    probs = np.linspace(0.1, 0.9, 5)  # Quantile levels of interest
    x_train, y_train, z_train = toy_data_quantile(50)
    x_test, y_test, z_test = toy_data_quantile(1000, probs=probs)

    print("Fitting...")
    # Joint quantile regression
    lbda = 1e-2
    gamma = 1e1
    joint = Quantile(probs=probs, kernel='DGauss', lbda=lbda, gamma=gamma,
                     gamma_quantile=1e-2)
    # Independent quantile regression
    ind = Quantile(probs=probs, kernel='DGauss', lbda=lbda, gamma=gamma,
                   gamma_quantile=np.inf)
    # Independent quantile regression (with non-crossing constraints)
    nc = Quantile(probs=probs, kernel='DGauss', lbda=lbda, gamma=gamma,
                  gamma_quantile=np.inf, nc_const=True)

    # Fit on training data
    methods = {'joint': joint,
               'independant': ind,
               'non-crossing': nc}
    for name, reg in methods.items():
        start = time.time()
        reg.fit(x_train, y_train)
    #    pred = joint.predict(x_test)
        print(name + ' leaning time: ', time.time() - start)
        print(name + ' score ', reg.score(x_test, y_test))

    # Plot the estimated conditional quantiles

    plt.figure(figsize=(12, 7))
    for (i, (reg, title)) in enumerate(
        [(joint, 'Joint'),
         (ind, 'Independent'),
         (nc, 'Independent (non-crossing)')]):
        plt.subplot(1, 3, i + 1)
        plt.plot(x_train, y_train, '.')
        for q in reg.predict(x_test):
            plt.plot(x_test, q, '-')
        for q in z_test:
            plt.plot(x_test, q, '--')
        plt.title(title)
    plt.show()

**Total running time of the script:** ( 0 minutes  2.121 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ovk_quantile_regression.py <plot_ovk_quantile_regression.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ovk_quantile_regression.ipynb <plot_ovk_quantile_regression.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
