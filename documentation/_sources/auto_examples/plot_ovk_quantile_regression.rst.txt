

.. _sphx_glr_auto_examples_plot_ovk_quantile_regression.py:


======================================================
Joint quantile regression with operator-valued kernels
======================================================

An example to illustrate joint quantile regression with operator-valued
kernels.

We compare quantile regression estimation with and without non-crossing
constraints.




.. image:: /auto_examples/images/sphx_glr_plot_ovk_quantile_regression_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    Creating dataset...
    Fitting...
    Default
    ('Default leaning time: ', 0.1070868968963623)
    ('Default score ', 0.5335868250609177)
    Independent
    ('Independent leaning time: ', 2.1871888637542725)
    ('Independent score ', 0.5697215810767537)
    Joint
    ('Joint leaning time: ', 5.312191963195801)
    ('Joint score ', 0.5712579219355465)
    Non-crossing
    ('Non-crossing leaning time: ', 9.791551113128662)
    ('Non-crossing score ', 0.5707150248785774)




|


.. code-block:: python


    # Author: Maxime Sangnier <maxime.sangnier@gmail.com>
    # License: MIT

    # -*- coding: utf-8 -*-
    import time

    import numpy as np
    import matplotlib.pyplot as plt

    from operalib import Quantile, toy_data_quantile


    def main():
        """Example of multiple quantile regression."""

        print("Creating dataset...")
        probs = np.linspace(0.1, 0.9, 5)  # Quantile levels of interest
        x_train, y_train, _ = toy_data_quantile(100, random_state=0)
        x_test, y_test, z_test = toy_data_quantile(1000, probs=probs,
                                                   random_state=1)

        print("Fitting...")
        methods = {'Default': Quantile(),
                    'Joint':
                   Quantile(probs=probs, kernel='DGauss', lbda=1e-2, gamma=8.,
                            gamma_quantile=1e-2),
                   'Independent': Quantile(probs=probs, kernel='DGauss',
                                           lbda=1e-2, gamma=8.,
                                           gamma_quantile=np.inf),
                   'Non-crossing': Quantile(probs=probs, kernel='DGauss',
                                            lbda=1e-2, gamma=8.,
                                            gamma_quantile=np.inf, nc_const=True)}
        # Fit on training data
        for name, reg in sorted(methods.items()):
            print(name)
            start = time.time()
            reg.fit(x_train, y_train)
            print(name + ' leaning time: ', time.time() - start)
            print(name + ' score ', reg.score(x_test, y_test))

        # Plot the estimated conditional quantiles
        plt.figure(figsize=(12, 7))
        for i, method in enumerate(sorted(methods.keys())):
            plt.subplot(1, 4, i + 1)
            plt.plot(x_train, y_train, '.')
            plt.gca().set_prop_cycle(None)
            predictions = methods[method].predict(x_test)
            if predictions.ndim < 2:
                plt.plot(x_test, predictions, '-')
            else:
                for quantile in predictions:
                    plt.plot(x_test, quantile, '-')
            plt.gca().set_prop_cycle(None)
            for prob, quantile in zip(probs, z_test):
                plt.plot(x_test, quantile, '--', label="theoretical {0:0.2f}".format(prob))
            plt.title(method)
            plt.legend(fontsize=8)
        plt.show()

    if __name__ == '__main__':
        main()

**Total running time of the script:** ( 0 minutes  19.318 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ovk_quantile_regression.py <plot_ovk_quantile_regression.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ovk_quantile_regression.ipynb <plot_ovk_quantile_regression.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
